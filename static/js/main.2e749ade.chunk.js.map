{"version":3,"sources":["serviceWorker.ts","pages/home/index.tsx","components/Header/index.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Home","props","state","value","mode","console","log","className","fullscreen","onPanelChange","this","React","Component","Header","date","Date","toLocaleDateString","name","App","locale","zhCN","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4TAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4DCiBSC,G,mBAzBX,WAAYC,GAAa,IAAD,8BACpB,4CAAMA,KACDC,MAAQ,GAFO,E,2EAMVC,EAAYC,GACtBC,QAAQC,IAAI,SAAUH,GACtBE,QAAQC,IAAI,QAASF,K,+BAIrB,OACI,yBAAKG,UAAU,QACX,yBAAKA,UAAU,aAAf,QAGA,yBAAKA,UAAU,iBACX,kBAAC,IAAD,CAAUC,YAAY,EAAOC,cAAeC,KAAKD,sB,GAnBlDE,IAAMC,YCmCVC,G,mBAhCX,WAAYZ,GAAa,IAAD,8BACpB,4CAAMA,KACDC,MAAQ,CACTY,MAAM,IAAIC,MAAOC,sBAHD,E,sEAQpB,OACI,yBAAKT,UAAU,kBACX,sCAAYG,KAAKT,MAAMgB,MACvB,yBAAKV,UAAU,aACX,8BAAOG,KAAKT,MAAMgB,MAClB,8BAAOP,KAAKR,MAAMY,Y,GAdjBH,IAAMC,Y,iBCQZM,EAXO,WACpB,OACE,kBAAC,IAAD,CAAgBC,OAAQC,KACtB,yBAAKb,UAAU,OACb,kBAAC,EAAD,CAAQA,UAAU,aAAaU,KAAK,aACpC,kBAAC,EAAD,SCLRI,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SJiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2e749ade.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Calendar } from 'antd';\r\nimport './index.scss';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface States {\r\n}\r\nclass Home extends React.Component<Props, States> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    onPanelChange(value: any, mode: any) {\r\n        console.log('value:', value);\r\n        console.log('mode:', mode);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"home\">\r\n                <div className=\"home-left\">\r\n                    left\r\n                </div>\r\n                <div className=\"home-calendar\">\r\n                    <Calendar fullscreen={false} onPanelChange={this.onPanelChange} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './index.scss';\r\n\r\ninterface Props {\r\n    className?: String;\r\n    readonly name: String;\r\n}\r\n\r\ninterface States {\r\n    readonly date: String\r\n}\r\nclass Header extends React.Component<Props, States> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date().toLocaleDateString()\r\n        };\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"header-content\">\r\n                <h2>Hello, {this.props.name}</h2>\r\n                <div className=\"user-info\">\r\n                    <span>{this.props.name}</span>\r\n                    <span>{this.state.date}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// function Header(props: any) {\r\n//     return (\r\n//         <div className=\"header-content\">\r\n//             <h2>Hello, {props.name}</h2>\r\n//             <div className=\"user-info\">\r\n//                 <span>{props.name}</span>\r\n//                 <span>subs</span>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport default Header","import React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Home from './pages/home'\r\nimport Header from '../src/components/Header';\r\nimport zhCN from 'antd/es/locale/zh_CN';\r\nimport { ConfigProvider } from 'antd';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ConfigProvider locale={zhCN}>\r\n      <div className=\"App\">\r\n        <Header className=\"App-header\" name=\"Jinpeng~\"/>\r\n        <Home />\r\n      </div>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './public/scss/index.scss'\r\nimport 'antd/dist/antd.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}